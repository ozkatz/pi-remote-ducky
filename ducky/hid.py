
import struct          
from typing import List

from ducky.exceptions import DuckyParseError


MODIFIERS = dict((
    ('CTRL',  0x01),
    ('SHIFT', 0x02),
    ('ALT',   0x04),
    ('META',  0x08),
))

TERMINATOR = b'\x00\x00\x00\x00\x00\x00\x00\x00'
          
KEYMAP = dict((
    ('a',           b'\x00\x00\x04\x00\x00\x00\x00\x00'),
    ('b',           b'\x00\x00\x05\x00\x00\x00\x00\x00'),
    ('c',           b'\x00\x00\x06\x00\x00\x00\x00\x00'),
    ('d',           b'\x00\x00\x07\x00\x00\x00\x00\x00'),
    ('e',           b'\x00\x00\x08\x00\x00\x00\x00\x00'),
    ('f',           b'\x00\x00\x09\x00\x00\x00\x00\x00'),
    ('g',           b'\x00\x00\x0a\x00\x00\x00\x00\x00'),
    ('h',           b'\x00\x00\x0b\x00\x00\x00\x00\x00'),
    ('i',           b'\x00\x00\x0c\x00\x00\x00\x00\x00'),
    ('j',           b'\x00\x00\x0d\x00\x00\x00\x00\x00'),
    ('k',           b'\x00\x00\x0e\x00\x00\x00\x00\x00'),
    ('l',           b'\x00\x00\x0f\x00\x00\x00\x00\x00'),
    ('m',           b'\x00\x00\x10\x00\x00\x00\x00\x00'),
    ('n',           b'\x00\x00\x11\x00\x00\x00\x00\x00'),
    ('o',           b'\x00\x00\x12\x00\x00\x00\x00\x00'),
    ('p',           b'\x00\x00\x13\x00\x00\x00\x00\x00'),
    ('q',           b'\x00\x00\x14\x00\x00\x00\x00\x00'),
    ('r',           b'\x00\x00\x15\x00\x00\x00\x00\x00'),
    ('s',           b'\x00\x00\x16\x00\x00\x00\x00\x00'),
    ('t',           b'\x00\x00\x17\x00\x00\x00\x00\x00'),
    ('u',           b'\x00\x00\x18\x00\x00\x00\x00\x00'),
    ('v',           b'\x00\x00\x19\x00\x00\x00\x00\x00'),
    ('w',           b'\x00\x00\x1a\x00\x00\x00\x00\x00'),
    ('x',           b'\x00\x00\x1b\x00\x00\x00\x00\x00'),
    ('y',           b'\x00\x00\x1c\x00\x00\x00\x00\x00'),
    ('z',           b'\x00\x00\x1d\x00\x00\x00\x00\x00'),
    ('A',           b'\x02\x00\x04\x00\x00\x00\x00\x00'),
    ('B',           b'\x02\x00\x05\x00\x00\x00\x00\x00'),
    ('C',           b'\x02\x00\x06\x00\x00\x00\x00\x00'),
    ('D',           b'\x02\x00\x07\x00\x00\x00\x00\x00'),
    ('E',           b'\x02\x00\x08\x00\x00\x00\x00\x00'),
    ('F',           b'\x02\x00\x09\x00\x00\x00\x00\x00'),
    ('G',           b'\x02\x00\x0a\x00\x00\x00\x00\x00'),
    ('H',           b'\x02\x00\x0b\x00\x00\x00\x00\x00'),
    ('I',           b'\x02\x00\x0c\x00\x00\x00\x00\x00'),
    ('J',           b'\x02\x00\x0d\x00\x00\x00\x00\x00'),
    ('K',           b'\x02\x00\x0e\x00\x00\x00\x00\x00'),
    ('L',           b'\x02\x00\x0f\x00\x00\x00\x00\x00'),
    ('M',           b'\x02\x00\x10\x00\x00\x00\x00\x00'),
    ('N',           b'\x02\x00\x11\x00\x00\x00\x00\x00'),
    ('O',           b'\x02\x00\x12\x00\x00\x00\x00\x00'),
    ('P',           b'\x02\x00\x13\x00\x00\x00\x00\x00'),
    ('Q',           b'\x02\x00\x14\x00\x00\x00\x00\x00'),
    ('R',           b'\x02\x00\x15\x00\x00\x00\x00\x00'),
    ('S',           b'\x02\x00\x16\x00\x00\x00\x00\x00'),
    ('T',           b'\x02\x00\x17\x00\x00\x00\x00\x00'),
    ('U',           b'\x02\x00\x18\x00\x00\x00\x00\x00'),
    ('V',           b'\x02\x00\x19\x00\x00\x00\x00\x00'),
    ('W',           b'\x02\x00\x1a\x00\x00\x00\x00\x00'),
    ('X',           b'\x02\x00\x1b\x00\x00\x00\x00\x00'),
    ('Y',           b'\x02\x00\x1c\x00\x00\x00\x00\x00'),
    ('Z',           b'\x02\x00\x1d\x00\x00\x00\x00\x00'),
    ('0',           b'\x00\x00\x00\x00\x00\x00\x00\x00'),
    ('1',           b'\x00\x00\x1e\x00\x00\x00\x00\x00'),
    ('2',           b'\x00\x00\x1f\x00\x00\x00\x00\x00'),
    ('3',           b'\x00\x00\x20\x00\x00\x00\x00\x00'),
    ('4',           b'\x00\x00\x21\x00\x00\x00\x00\x00'),
    ('5',           b'\x00\x00\x22\x00\x00\x00\x00\x00'),
    ('6',           b'\x00\x00\x23\x00\x00\x00\x00\x00'),
    ('7',           b'\x00\x00\x24\x00\x00\x00\x00\x00'),
    ('8',           b'\x00\x00\x25\x00\x00\x00\x00\x00'),
    ('9',           b'\x00\x00\x26\x00\x00\x00\x00\x00'),
    ('0',           b'\x00\x00\x27\x00\x00\x00\x00\x00'),
    ('!',           b'\x02\x00\x1e\x00\x00\x00\x00\x00'),
    ('@',           b'\x02\x00\x1f\x00\x00\x00\x00\x00'),
    ('#',           b'\x02\x00\x20\x00\x00\x00\x00\x00'),
    ('$',           b'\x02\x00\x21\x00\x00\x00\x00\x00'),
    ('%',           b'\x02\x00\x22\x00\x00\x00\x00\x00'),
    ('^',           b'\x02\x00\x23\x00\x00\x00\x00\x00'),
    ('&',           b'\x02\x00\x24\x00\x00\x00\x00\x00'),
    ('*',           b'\x02\x00\x28\x00\x00\x00\x00\x00'),
    ('(',           b'\x02\x00\x29\x00\x00\x00\x00\x00'),
    (')',           b'\x02\x00\x30\x00\x00\x00\x00\x00'),
    ('-',           b'\x00\x00\x2d\x00\x00\x00\x00\x00'),
    ('_',           b'\x02\x00\x2d\x00\x00\x00\x00\x00'),
    ('+',           b'\x02\x00\x2e\x00\x00\x00\x00\x00'),
    ('=',           b'\x00\x00\x2e\x00\x00\x00\x00\x00'),
    (':',           b'\x02\x00\x33\x00\x00\x00\x00\x00'),
    (';',           b'\x00\x00\x33\x00\x00\x00\x00\x00'),
    ('`',           b'\x00\x00\x36\x00\x00\x00\x00\x00'),
    ('~',           b'\x02\x00\x36\x00\x00\x00\x00\x00'),
    ('<',           b'\x02\x00\x36\x00\x00\x00\x00\x00'),
    ('>',           b'\x02\x00\x37\x00\x00\x00\x00\x00'),
    ('.',           b'\x00\x00\x37\x00\x00\x00\x00\x00'),
    (',',           b'\x00\x00\x36\x00\x00\x00\x00\x00'),
    ('?',           b'\x02\x00\x38\x00\x00\x00\x00\x00'),
    ('\\',          b'\x00\x00\x31\x00\x00\x00\x00\x00'),
    ('|',           b'\x02\x00\x31\x00\x00\x00\x00\x00'),
    ('/',           b'\x00\x00\x38\x00\x00\x00\x00\x00'),
    ('\'',          b'\x00\x00\x34\x00\x00\x00\x00\x00'),
    ('"',           b'\x02\x00\x34\x00\x00\x00\x00\x00'), 
    ('DOWN',        b'\x00\x00\x51\x00\x00\x00\x00\x00'),
    ('DOWNARROW',   b'\x00\x00\x51\x00\x00\x00\x00\x00'),
    ('LEFT',        b'\x00\x00\x50\x00\x00\x00\x00\x00'),
    ('LEFTARROW',   b'\x00\x00\x50\x00\x00\x00\x00\x00'),
    ('RIGHT',       b'\x00\x00\xf4\x00\x00\x00\x00\x00'),
    ('RIGHTARROW',  b'\x00\x00\xf4\x00\x00\x00\x00\x00'),
    ('UP',          b'\x00\x00\x52\x00\x00\x00\x00\x00'),
    ('UPARROW',     b'\x00\x00\x52\x00\x00\x00\x00\x00'),
    ('PAUSE',       b'\x00\x00\x48\x00\x00\x00\x00\x00'),
    ('BREAK',       b'\x00\x00\x48\x00\x00\x00\x00\x00'),
    ('CAPSLOCK',    b'\x00\x00\x39\x00\x00\x00\x00\x00'),
    ('DELETE',      b'\x00\x00\x4c\x00\x00\x00\x00\x00'),
    ('END',         b'\x00\x00\x4d\x00\x00\x00\x00\x00'),
    ('ESC',         b'\x00\x00\x29\x00\x00\x00\x00\x00'),
    ('ESCAPE',      b'\x00\x00\x29\x00\x00\x00\x00\x00'),
    ('HOME',        b'\x00\x00\x4a\x00\x00\x00\x00\x00'),
    ('INSERT',      b'\x00\x00\x49\x00\x00\x00\x00\x00'),
    ('NUMLOCK',     b'\x00\x00\x53\x00\x00\x00\x00\x00'),
    ('PAGEUP',      b'\x00\x00\x4b\x00\x00\x00\x00\x00'),
    ('PAGEDOWN',    b'\x00\x00\x4e\x00\x00\x00\x00\x00'),
    ('PRINTSCREEN', b'\x00\x00\x46\x00\x00\x00\x00\x00'),
    ('SCROLLLOCK',  b'\x00\x00\x47\x00\x00\x00\x00\x00'),
    (' ',           b'\x00\x00\x2c\x00\x00\x00\x00\x00'),
    ('SPACE',       b'\x00\x00\x2c\x00\x00\x00\x00\x00'),
    ('TAB',         b'\x00\x00\x2b\x00\x00\x00\x00\x00'),
    ('ENTER',       b'\x00\x00\x28\x00\x00\x00\x00\x00'),
    ('PROPS',       b'\x00\x00\x76\x00\x00\x00\x00\x00'),
    ('F1',          b'\x00\x00\x3a\x00\x00\x00\x00\x00'),
    ('F2',          b'\x00\x00\x3b\x00\x00\x00\x00\x00'),
    ('F3',          b'\x00\x00\x3c\x00\x00\x00\x00\x00'),
    ('F4',          b'\x00\x00\x3d\x00\x00\x00\x00\x00'),
    ('F5',          b'\x00\x00\x3e\x00\x00\x00\x00\x00'),
    ('F6',          b'\x00\x00\x3f\x00\x00\x00\x00\x00'),
    ('F7',          b'\x00\x00\x40\x00\x00\x00\x00\x00'),
    ('F8',          b'\x00\x00\x41\x00\x00\x00\x00\x00'),
    ('F9',          b'\x00\x00\x42\x00\x00\x00\x00\x00'),
    ('F10',         b'\x00\x00\x43\x00\x00\x00\x00\x00'),
    ('F11',         b'\x00\x00\x44\x00\x00\x00\x00\x00'),
    ('F12',         b'\x00\x00\x45\x00\x00\x00\x00\x00'),
))


def itob(inp: int) -> bytes:
    return struct.pack('<b', inp)


def get_bytes(key: str, modifiers: List[str]=None) -> List[bytes]:
    key_bytes = KEYMAP.get(key)
    if key_bytes is None:
        raise DuckyParseError('key not found: {}'.format(key))
    if modifiers is None:
        return key_bytes + TERMINATOR
    mod_byte = key_bytes[0]
    for modifier in modifiers:
        val = MODIFIERS.get(modifier)
        mod_byte += val
    return itob(mod_byte) + key_bytes[1:] + TERMINATOR
